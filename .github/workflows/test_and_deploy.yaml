name: Test and Deploy

on: [pull_request, push]

jobs:
  tests:
    env:
      ENV_NAME: tests
      PYTHON: ${{ matrix.python-version }}
      OS: ${{ matrix.os }}
    name: Testing
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: [3.8, 3.9, "3.10", "3.11"]
    defaults:
     run:
       # Adding -l {0} ensures conda can be found properly in each step
       shell: bash -l {0}
    steps:
      - uses: actions/checkout@master
        with:
          fetch-depth: 1

      - name: Cache conda
        uses: actions/cache@v2
        env:
          # Increase this value to reset cache if ci/tests.yaml has not changed
          CACHE_NUMBER: 0
        with:
          path: ~/conda_pkgs_dir
          key:
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-${{ matrix.python-version }}-${{ hashFiles('ci/tests.yaml', 'setup.cfg') }}

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v2.1.1
        with:
          # auto-update-conda: true
          miniconda-version: "latest"
          python-version: ${{ matrix.python-version }}
          environment-file: ci/tests.yaml
          activate-environment: tests
          channels: conda-forge,defaults
          channel-priority: strict
          use-only-tar-bz2: true

      - name: Conda Info
        run: |
          conda info -a
          conda list
          PYVER=`python -c "import sys; print('{:d}.{:d}'.format(sys.version_info.major, sys.version_info.minor))"`
          if [[ $PYVER != $PYTHON ]]; then
            exit 1;
          fi

      - name: Install
        run: |
          pip install .[tests]

      - name: Run Tests
        run: |
          python -m pytest --cov=pspec_likelihood --cov-config=.coveragerc --cov-report xml:./coverage.xml --durations=25

      - uses: codecov/codecov-action@v2
        if: matrix.os == 'ubuntu-latest' && success()
        with:
          token: ${{secrets.CODECOV_TOKEN}} #required
          file: ./coverage.xml #optional

  deploy:
    needs: tests
    # Only run this job if new work is pushed to "main"
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    # Step 1. Set up operating system
    runs-on: ubuntu-latest
    steps:
    # Step 2. Set up Python 3.9
    - uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    # Step 3. Check-out repository so we can access its contents
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    # Step 4. Use PSR to make release
    - name: Python Semantic Release
      run: |
          pip install python-semantic-release
          git config user.name github-actions
          git config user.email github-actions@github.com
          semantic-release publish
    # Step 5. Publish to TestPyPI
    - name: Publish ðŸ“¦ to Test PyPI
      if: ${{ !contains(github.ref, 'main') }}
      uses: pypa/gh-action-pypi-publish@master
      with:
        password: ${{ secrets.test_pypi_password }}
        repository_url: https://test.pypi.org/legacy/
    # Step 6. Test install from TestPyPI
    - name: Test install from TestPyPI
      run: |
          pip install \
          --index-url https://test.pypi.org/simple/ \
          --extra-index-url https://pypi.org/simple \
          pspec_likelihood
    # Step 7. Publish to PyPI
    - name: Publish ðŸ“¦ to PyPI
      if: startsWith(github.ref, 'refs/tags')
      uses: pypa/gh-action-pypi-publish@master
      with:
        password: ${{ secrets.pypi_password }}
